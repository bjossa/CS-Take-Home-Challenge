<Window x:Class="CS_Take_Home_Challenge.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CS_Take_Home_Challenge"
        mc:Ignorable="d"
        Title="MainWindow"
        Background="DodgerBlue">
    <Window.Resources>
        <local:PersonValueConverter x:Key="IsActiveToForegroundColourConv"/>
        <local:VisibilityConverter x:Key="HaveFilePathToVisibilityConverter"/>

        <DataTemplate x:Key="PeopleHeaderTemplate">
            <TextBlock Grid.Column="0" Width="300" Height="30" Text="{Binding}" local:SortPeopleBehaviour.SortColumnHeader="True" TextAlignment="Center" Background="RoyalBlue" Foreground="AntiqueWhite"/>
        </DataTemplate>

        <Style x:Key="VisibleIfHaveFilePath" TargetType="FrameworkElement">
            <Setter Property="Visibility">
                <Setter.Value>
                    <Binding Path="HaveFilePath" Mode="OneWay" Converter="{StaticResource HaveFilePathToVisibilityConverter}"/>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="MediumBlue"/>
            <Setter Property="Foreground" Value="AntiqueWhite"/>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="PersonDataTextBlockStyle">
            <Setter Property="Width" Value="300"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="Foreground" Value="{Binding IsActive, Converter={StaticResource IsActiveToForegroundColourConv}}"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Background" Value="Navy"/>
            <Setter Property="TextAlignment" Value="Center"/>
        </Style>
    </Window.Resources>

    <DockPanel HorizontalAlignment="Center">
        <!-- input button and text field for filePath-->
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" HorizontalAlignment="Center">
            <TextBox x:Name="FilePathInputTextBox" Width="300" Height="30" Text="Enter filePath here"/>
            <Button Content="Submit" Width="250" Height="30" Command="{Binding InputFilePathCommand}" CommandParameter="{Binding ElementName=FilePathInputTextBox, Path=Text}"/>
        </StackPanel>

        <!-- todo: add a submit button so that a user can edit a person without submitting the changes right away, and also they can cancel the changes they were going to make with a cancel button. idea: Have something
                        in the button that the textboxes are listening to, and when you submit, that things changes, and then this triggers an event in the textbox for it to forward the info in its text to the bound property.
                        upon clicking cancel, you would just update the textboxes with what's currently in the model, since that hasn't changed, and change the editability of the textboxes back to false.-->
        <ListView ItemsSource="{Binding Path=PersonListVM.People, Mode=OneWay}"
                  x:Name="PeopleListView"
                  SelectionMode="Single"
                  SelectedItem="{Binding Path=PersonListVM.SelectedPerson, Mode=TwoWay}"
                  Style="{StaticResource VisibleIfHaveFilePath}"
                  DockPanel.Dock="Top"
                  Background="DarkBlue"
                  HorizontalContentAlignment="Center"
                  Height="640"
                 >
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                </Style>
            </ListView.ItemContainerStyle>
            <ListView.View>
                <GridView>

                    <GridViewColumn Width="300"
                                    Header="Name"
                                    HeaderTemplate="{StaticResource PeopleHeaderTemplate}">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Grid.Column="0" Text="{Binding Path=Name, Mode=TwoWay}" Style="{StaticResource PersonDataTextBlockStyle}"/>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>

                    </GridViewColumn>

                    <GridViewColumn Width="300"
                                    Header="Address"
                                    HeaderTemplate="{StaticResource PeopleHeaderTemplate}">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Grid.Column="1" Text="{Binding Path=Address, Mode=TwoWay}" Style="{StaticResource PersonDataTextBlockStyle}"/>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>

                    </GridViewColumn>

                    <GridViewColumn Width="300"
                                    Header="Phone"
                                    HeaderTemplate="{StaticResource PeopleHeaderTemplate}">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Grid.Column="2" Text="{Binding Path=Phone, Mode=TwoWay}" Style="{StaticResource PersonDataTextBlockStyle}"/>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                </GridView>

            </ListView.View>
            
        </ListView>

        <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" x:Name="EditPeopleStackPanel" Style="{StaticResource VisibleIfHaveFilePath}" HorizontalAlignment="Center">
            <Button Content="Add Person" Width="250" Height="30" Command="{Binding DisplayAddPersonDialogueCommand}"/>
            <Button Content="Edit Person" Width="250" Height="30" Command="{Binding DisplayEditPersonDialogueCommand}"/>
            <Button Content="Remove Person" Width="250" Height="30" Command="{Binding RemovePersonCommand}"/>
        </StackPanel>
    </DockPanel>


</Window>

    
    
    
    <!--
     Display People as a stackpanel
<ListBox ItemsSource="{Binding Path=People, Mode=OneWay}"
				 Visibility="{Binding PeopleVisibility, Mode=OneWay}"
                 x:Name="PeopleListBox">

    <ListBox.ItemsPanel>
        <ItemsPanelTemplate>
            <StackPanel Orientation="Vertical" HorizontalAlignment="Center"/>
        </ItemsPanelTemplate>
    </ListBox.ItemsPanel>

    <ListBox.ItemTemplate>
        <DataTemplate>
            <Grid Width="800">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Button Content="Edit" Height="50" Grid.Column="0" Command="{Binding ChangePersonEditabilityCommand}"/>
                < todo: make this change from a textblock to a textbox when a user hits the edit button. The content of this control is fed to a converter which takes in the editability and spits out a textblock or textbox appropriately>
                <TextBox Width="100" Height="50" Grid.Column="1" Text="{Binding Path=Name, Mode=TwoWay}" IsReadOnly="{Binding Path=IsReadOnly}"
                                   Foreground="{Binding IsActive, Converter={StaticResource IsActiveToForegroundColourConv}}"/>
                <TextBox Width="100" Height="50" Grid.Column="2" Text="{Binding Path=Address, Mode=TwoWay}" IsReadOnly="{Binding Path=IsReadOnly}"
                               Foreground="{Binding IsActive, Converter={StaticResource IsActiveToForegroundColourConv}}"/>
                <TextBox Width="100" Height="50" Grid.Column="3" Text="{Binding Path=Phone, Mode=TwoWay}" IsReadOnly="{Binding Path=IsReadOnly}"
                               Foreground="{Binding IsActive, Converter={StaticResource IsActiveToForegroundColourConv}}"/>
            </Grid>
        </DataTemplate>
    </ListBox.ItemTemplate>
</ListBox> -->
